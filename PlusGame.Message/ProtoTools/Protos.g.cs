// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PlusGame.Message {

  /// <summary>Holder for reflection information generated from Protos.proto</summary>
  public static partial class ProtosReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtosReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQcm90b3MucHJvdG8SEFBsdXNHYW1lLk1lc3NhZ2UaGFByb3RvLkFjdG9y",
            "L1Byb3Rvcy5wcm90byIGCgREb25lIjcKC1JlZ2lzdGVyUGlkEgwKBE5hbWUY",
            "ASABKAkSGgoGU2VuZGVyGAIgASgLMgouYWN0b3IuUElEIh0KDVVuUmVnaXN0",
            "ZXJQaWQSDAoETmFtZRgBIAEoCSIaCgpSZXF1ZXN0UGlkEgwKBE5hbWUYASAB",
            "KAkiKQoLUmVzcG9uc2VQaWQSGgoGU2VuZGVyGAEgASgLMgouYWN0b3IuUElE",
            "IgYKBFBpbmciBgoEUG9uZyL7AQoOUmVxdWVzdFBhY2thZ2USDQoFTXNnSWQY",
            "ASABKAUSEAoIQWN0aW9uSWQYAiABKAUSEQoJU2Vzc2lvbklkGAMgASgJEg4K",
            "BlVzZXJJZBgEIAEoBRIKCgJTdBgFIAEoCRITCgtSZWNlaXZlVGltZRgGIAEo",
            "AxJACghEaWN0RGF0YRgHIAMoCzIuLlBsdXNHYW1lLk1lc3NhZ2UuUmVxdWVz",
            "dFBhY2thZ2UuRGljdERhdGFFbnRyeRIRCglBY3Rvck5hbWUYCCABKAkaLwoN",
            "RGljdERhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgB",
            "IsABCg9SZXNwb25zZVBhY2thZ2USDQoFTXNnSWQYASABKAUSEAoIQWN0aW9u",
            "SWQYAiABKAUSEQoJU2Vzc2lvbklkGAMgASgJEg4KBlVzZXJJZBgEIAEoBRIK",
            "CgJTdBgFIAEoCRITCgtSZWNlaXZlVGltZRgGIAEoAxIUCgxSZXNwb25zZVRp",
            "bWUYByABKAMSEQoJRXJyb3JDb2RlGAggASgFEhEKCUVycm9ySW5mbxgJIAEo",
            "CRIMCgREYXRhGAogASgJIlsKC1JlcXVlc3REYXRhEg8KB0V2ZW50SWQYASAB",
            "KAkSEwoLTWVzc2FnZVR5cGUYAiABKAUSEwoLTWVzc2FnZURhdGEYAyABKAkS",
            "EQoJQWN0b3JOYW1lGAQgASgJImgKDFJlc3BvbnNlRGF0YRIPCgdFdmVudElk",
            "GAEgASgJEhMKC01lc3NhZ2VUeXBlGAIgASgFEhEKCUVycm9yQ29kZRgDIAEo",
            "BRIRCglFcnJvckluZm8YBCABKAkSDAoERGF0YRgFIAEoCUITqgIQUGx1c0dh",
            "bWUuTWVzc2FnZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.ProtosReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.Done), global::PlusGame.Message.Done.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.RegisterPid), global::PlusGame.Message.RegisterPid.Parser, new[]{ "Name", "Sender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.UnRegisterPid), global::PlusGame.Message.UnRegisterPid.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.RequestPid), global::PlusGame.Message.RequestPid.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.ResponsePid), global::PlusGame.Message.ResponsePid.Parser, new[]{ "Sender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.Ping), global::PlusGame.Message.Ping.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.Pong), global::PlusGame.Message.Pong.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.RequestPackage), global::PlusGame.Message.RequestPackage.Parser, new[]{ "MsgId", "ActionId", "SessionId", "UserId", "St", "ReceiveTime", "DictData", "ActorName" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.ResponsePackage), global::PlusGame.Message.ResponsePackage.Parser, new[]{ "MsgId", "ActionId", "SessionId", "UserId", "St", "ReceiveTime", "ResponseTime", "ErrorCode", "ErrorInfo", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.RequestData), global::PlusGame.Message.RequestData.Parser, new[]{ "EventId", "MessageType", "MessageData", "ActorName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlusGame.Message.ResponseData), global::PlusGame.Message.ResponseData.Parser, new[]{ "EventId", "MessageType", "ErrorCode", "ErrorInfo", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Done : pb::IMessage<Done> {
    private static readonly pb::MessageParser<Done> _parser = new pb::MessageParser<Done>(() => new Done());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Done> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Done() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Done(Done other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Done Clone() {
      return new Done(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Done);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Done other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Done other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RegisterPid : pb::IMessage<RegisterPid> {
    private static readonly pb::MessageParser<RegisterPid> _parser = new pb::MessageParser<RegisterPid>(() => new RegisterPid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterPid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPid(RegisterPid other) : this() {
      name_ = other.name_;
      Sender = other.sender_ != null ? other.Sender.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPid Clone() {
      return new RegisterPid(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private global::Proto.PID sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PID Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterPid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterPid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Sender, other.Sender)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (sender_ != null) hash ^= Sender.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (sender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sender);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterPid other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          sender_ = new global::Proto.PID();
        }
        Sender.MergeFrom(other.Sender);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (sender_ == null) {
              sender_ = new global::Proto.PID();
            }
            input.ReadMessage(sender_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnRegisterPid : pb::IMessage<UnRegisterPid> {
    private static readonly pb::MessageParser<UnRegisterPid> _parser = new pb::MessageParser<UnRegisterPid>(() => new UnRegisterPid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnRegisterPid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnRegisterPid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnRegisterPid(UnRegisterPid other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnRegisterPid Clone() {
      return new UnRegisterPid(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnRegisterPid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnRegisterPid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnRegisterPid other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestPid : pb::IMessage<RequestPid> {
    private static readonly pb::MessageParser<RequestPid> _parser = new pb::MessageParser<RequestPid>(() => new RequestPid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestPid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPid(RequestPid other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPid Clone() {
      return new RequestPid(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestPid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestPid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestPid other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponsePid : pb::IMessage<ResponsePid> {
    private static readonly pb::MessageParser<ResponsePid> _parser = new pb::MessageParser<ResponsePid>(() => new ResponsePid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponsePid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsePid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsePid(ResponsePid other) : this() {
      Sender = other.sender_ != null ? other.Sender.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsePid Clone() {
      return new ResponsePid(this);
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 1;
    private global::Proto.PID sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PID Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponsePid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponsePid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sender, other.Sender)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sender_ != null) hash ^= Sender.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sender);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponsePid other) {
      if (other == null) {
        return;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          sender_ = new global::Proto.PID();
        }
        Sender.MergeFrom(other.Sender);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sender_ == null) {
              sender_ = new global::Proto.PID();
            }
            input.ReadMessage(sender_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ping : pb::IMessage<Ping> {
    private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping(Ping other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping Clone() {
      return new Ping(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Pong : pb::IMessage<Pong> {
    private static readonly pb::MessageParser<Pong> _parser = new pb::MessageParser<Pong>(() => new Pong());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pong(Pong other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pong Clone() {
      return new Pong(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pong other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///外网数据
  /// </summary>
  public sealed partial class RequestPackage : pb::IMessage<RequestPackage> {
    private static readonly pb::MessageParser<RequestPackage> _parser = new pb::MessageParser<RequestPackage>(() => new RequestPackage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPackage(RequestPackage other) : this() {
      msgId_ = other.msgId_;
      actionId_ = other.actionId_;
      sessionId_ = other.sessionId_;
      userId_ = other.userId_;
      st_ = other.st_;
      receiveTime_ = other.receiveTime_;
      dictData_ = other.dictData_.Clone();
      actorName_ = other.actorName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPackage Clone() {
      return new RequestPackage(this);
    }

    /// <summary>Field number for the "MsgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private int msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "ActionId" field.</summary>
    public const int ActionIdFieldNumber = 2;
    private int actionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    /// <summary>Field number for the "SessionId" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "St" field.</summary>
    public const int StFieldNumber = 5;
    private string st_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string St {
      get { return st_; }
      set {
        st_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReceiveTime" field.</summary>
    public const int ReceiveTimeFieldNumber = 6;
    private long receiveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReceiveTime {
      get { return receiveTime_; }
      set {
        receiveTime_ = value;
      }
    }

    /// <summary>Field number for the "DictData" field.</summary>
    public const int DictDataFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_dictData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 58);
    private readonly pbc::MapField<string, string> dictData_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> DictData {
      get { return dictData_; }
    }

    /// <summary>Field number for the "ActorName" field.</summary>
    public const int ActorNameFieldNumber = 8;
    private string actorName_ = "";
    /// <summary>
    ///异步使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorName {
      get { return actorName_; }
      set {
        actorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgId != other.MsgId) return false;
      if (ActionId != other.ActionId) return false;
      if (SessionId != other.SessionId) return false;
      if (UserId != other.UserId) return false;
      if (St != other.St) return false;
      if (ReceiveTime != other.ReceiveTime) return false;
      if (!DictData.Equals(other.DictData)) return false;
      if (ActorName != other.ActorName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgId != 0) hash ^= MsgId.GetHashCode();
      if (ActionId != 0) hash ^= ActionId.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (St.Length != 0) hash ^= St.GetHashCode();
      if (ReceiveTime != 0L) hash ^= ReceiveTime.GetHashCode();
      hash ^= DictData.GetHashCode();
      if (ActorName.Length != 0) hash ^= ActorName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MsgId);
      }
      if (ActionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionId);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SessionId);
      }
      if (UserId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UserId);
      }
      if (St.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(St);
      }
      if (ReceiveTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ReceiveTime);
      }
      dictData_.WriteTo(output, _map_dictData_codec);
      if (ActorName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ActorName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgId);
      }
      if (ActionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionId);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (St.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(St);
      }
      if (ReceiveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiveTime);
      }
      size += dictData_.CalculateSize(_map_dictData_codec);
      if (ActorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestPackage other) {
      if (other == null) {
        return;
      }
      if (other.MsgId != 0) {
        MsgId = other.MsgId;
      }
      if (other.ActionId != 0) {
        ActionId = other.ActionId;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.St.Length != 0) {
        St = other.St;
      }
      if (other.ReceiveTime != 0L) {
        ReceiveTime = other.ReceiveTime;
      }
      dictData_.Add(other.dictData_);
      if (other.ActorName.Length != 0) {
        ActorName = other.ActorName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadInt32();
            break;
          }
          case 16: {
            ActionId = input.ReadInt32();
            break;
          }
          case 26: {
            SessionId = input.ReadString();
            break;
          }
          case 32: {
            UserId = input.ReadInt32();
            break;
          }
          case 42: {
            St = input.ReadString();
            break;
          }
          case 48: {
            ReceiveTime = input.ReadInt64();
            break;
          }
          case 58: {
            dictData_.AddEntriesFrom(input, _map_dictData_codec);
            break;
          }
          case 66: {
            ActorName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponsePackage : pb::IMessage<ResponsePackage> {
    private static readonly pb::MessageParser<ResponsePackage> _parser = new pb::MessageParser<ResponsePackage>(() => new ResponsePackage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponsePackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsePackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsePackage(ResponsePackage other) : this() {
      msgId_ = other.msgId_;
      actionId_ = other.actionId_;
      sessionId_ = other.sessionId_;
      userId_ = other.userId_;
      st_ = other.st_;
      receiveTime_ = other.receiveTime_;
      responseTime_ = other.responseTime_;
      errorCode_ = other.errorCode_;
      errorInfo_ = other.errorInfo_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsePackage Clone() {
      return new ResponsePackage(this);
    }

    /// <summary>Field number for the "MsgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private int msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "ActionId" field.</summary>
    public const int ActionIdFieldNumber = 2;
    private int actionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    /// <summary>Field number for the "SessionId" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "St" field.</summary>
    public const int StFieldNumber = 5;
    private string st_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string St {
      get { return st_; }
      set {
        st_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReceiveTime" field.</summary>
    public const int ReceiveTimeFieldNumber = 6;
    private long receiveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReceiveTime {
      get { return receiveTime_; }
      set {
        receiveTime_ = value;
      }
    }

    /// <summary>Field number for the "ResponseTime" field.</summary>
    public const int ResponseTimeFieldNumber = 7;
    private long responseTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResponseTime {
      get { return responseTime_; }
      set {
        responseTime_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 8;
    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "ErrorInfo" field.</summary>
    public const int ErrorInfoFieldNumber = 9;
    private string errorInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorInfo {
      get { return errorInfo_; }
      set {
        errorInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 10;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponsePackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponsePackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgId != other.MsgId) return false;
      if (ActionId != other.ActionId) return false;
      if (SessionId != other.SessionId) return false;
      if (UserId != other.UserId) return false;
      if (St != other.St) return false;
      if (ReceiveTime != other.ReceiveTime) return false;
      if (ResponseTime != other.ResponseTime) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorInfo != other.ErrorInfo) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgId != 0) hash ^= MsgId.GetHashCode();
      if (ActionId != 0) hash ^= ActionId.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (St.Length != 0) hash ^= St.GetHashCode();
      if (ReceiveTime != 0L) hash ^= ReceiveTime.GetHashCode();
      if (ResponseTime != 0L) hash ^= ResponseTime.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorInfo.Length != 0) hash ^= ErrorInfo.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MsgId);
      }
      if (ActionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionId);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SessionId);
      }
      if (UserId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UserId);
      }
      if (St.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(St);
      }
      if (ReceiveTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ReceiveTime);
      }
      if (ResponseTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ResponseTime);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorInfo.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ErrorInfo);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgId);
      }
      if (ActionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionId);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (St.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(St);
      }
      if (ReceiveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiveTime);
      }
      if (ResponseTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResponseTime);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (ErrorInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorInfo);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponsePackage other) {
      if (other == null) {
        return;
      }
      if (other.MsgId != 0) {
        MsgId = other.MsgId;
      }
      if (other.ActionId != 0) {
        ActionId = other.ActionId;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.St.Length != 0) {
        St = other.St;
      }
      if (other.ReceiveTime != 0L) {
        ReceiveTime = other.ReceiveTime;
      }
      if (other.ResponseTime != 0L) {
        ResponseTime = other.ResponseTime;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorInfo.Length != 0) {
        ErrorInfo = other.ErrorInfo;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadInt32();
            break;
          }
          case 16: {
            ActionId = input.ReadInt32();
            break;
          }
          case 26: {
            SessionId = input.ReadString();
            break;
          }
          case 32: {
            UserId = input.ReadInt32();
            break;
          }
          case 42: {
            St = input.ReadString();
            break;
          }
          case 48: {
            ReceiveTime = input.ReadInt64();
            break;
          }
          case 56: {
            ResponseTime = input.ReadInt64();
            break;
          }
          case 64: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 74: {
            ErrorInfo = input.ReadString();
            break;
          }
          case 82: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///内外数据
  /// </summary>
  public sealed partial class RequestData : pb::IMessage<RequestData> {
    private static readonly pb::MessageParser<RequestData> _parser = new pb::MessageParser<RequestData>(() => new RequestData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestData(RequestData other) : this() {
      eventId_ = other.eventId_;
      messageType_ = other.messageType_;
      messageData_ = other.messageData_;
      actorName_ = other.actorName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestData Clone() {
      return new RequestData(this);
    }

    /// <summary>Field number for the "EventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private string eventId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MessageType" field.</summary>
    public const int MessageTypeFieldNumber = 2;
    private int messageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "MessageData" field.</summary>
    public const int MessageDataFieldNumber = 3;
    private string messageData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageData {
      get { return messageData_; }
      set {
        messageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActorName" field.</summary>
    public const int ActorNameFieldNumber = 4;
    private string actorName_ = "";
    /// <summary>
    ///异步使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorName {
      get { return actorName_; }
      set {
        actorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (MessageType != other.MessageType) return false;
      if (MessageData != other.MessageData) return false;
      if (ActorName != other.ActorName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (MessageType != 0) hash ^= MessageType.GetHashCode();
      if (MessageData.Length != 0) hash ^= MessageData.GetHashCode();
      if (ActorName.Length != 0) hash ^= ActorName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (MessageType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MessageType);
      }
      if (MessageData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MessageData);
      }
      if (ActorName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ActorName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (MessageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageType);
      }
      if (MessageData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageData);
      }
      if (ActorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestData other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.MessageType != 0) {
        MessageType = other.MessageType;
      }
      if (other.MessageData.Length != 0) {
        MessageData = other.MessageData;
      }
      if (other.ActorName.Length != 0) {
        ActorName = other.ActorName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 16: {
            MessageType = input.ReadInt32();
            break;
          }
          case 26: {
            MessageData = input.ReadString();
            break;
          }
          case 34: {
            ActorName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseData : pb::IMessage<ResponseData> {
    private static readonly pb::MessageParser<ResponseData> _parser = new pb::MessageParser<ResponseData>(() => new ResponseData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlusGame.Message.ProtosReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseData(ResponseData other) : this() {
      eventId_ = other.eventId_;
      messageType_ = other.messageType_;
      errorCode_ = other.errorCode_;
      errorInfo_ = other.errorInfo_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseData Clone() {
      return new ResponseData(this);
    }

    /// <summary>Field number for the "EventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private string eventId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MessageType" field.</summary>
    public const int MessageTypeFieldNumber = 2;
    private int messageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 3;
    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "ErrorInfo" field.</summary>
    public const int ErrorInfoFieldNumber = 4;
    private string errorInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorInfo {
      get { return errorInfo_; }
      set {
        errorInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 5;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (MessageType != other.MessageType) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorInfo != other.ErrorInfo) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (MessageType != 0) hash ^= MessageType.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorInfo.Length != 0) hash ^= ErrorInfo.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (MessageType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MessageType);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ErrorInfo);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (MessageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageType);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (ErrorInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorInfo);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseData other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.MessageType != 0) {
        MessageType = other.MessageType;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorInfo.Length != 0) {
        ErrorInfo = other.ErrorInfo;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 16: {
            MessageType = input.ReadInt32();
            break;
          }
          case 24: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 34: {
            ErrorInfo = input.ReadString();
            break;
          }
          case 42: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
